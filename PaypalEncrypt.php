<?php

/**
 * Created by PhpStorm.
 * User: josegomez
 * Date: 23/02/2017
 * Time: 02:59 PM
 */
namespace catcoderphp\paypalEncrypt;

class PaypalEncrypt extends \yii\base\Component
{
    public $paypalCertificateId;
    public $paypalCertificatePath;
    public $publicSSLKeyPath;
    public $privateSSLKeyPath;
    public $openSSLLib = "/usr/bin/openssl";
    public $successUrl;
    public $buttonConf;
    public $businessEmail;
    public $isProduction = false;
    public $paypalURL;
    public $failUrl;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->paypalURL =  ($this->isProduction) ?
            "https://www.paypal.com/cgi-bin/webscr" :
            "https://www.sandbox.paypal.com/cgi-bin/webscr";
    }

    public function getButtonCode($amount, $currency, $orderIdentifier)
    {
        $this->buttonConf = $this->setParams($amount, $currency, $orderIdentifier);
        $encryptCode = $this->encryptData(
            $this->buttonConf,
            $this->publicSSLKeyPath,
            $this->privateSSLKeyPath,
            $this->paypalCertificatePath,
            $this->openSSLLib
        );
        if (!$encryptCode) {
            return "FAIL";
        }
        return $encryptCode;
    }

    private function setParams($amount, $currency, $orderIdentifier)
    {
        return [
            'cmd' => '_xclick',
            'business' => $this->businessEmail,
            'cert_id' => $this->paypalCertificateId,
            'lc' => 'US',
            "return" => $this->successUrl,
            'custom' => '',
            'invoice' => '',
            'rm' => 2,
            'currency_code' => $currency ,
            'no_shipping' => '1',
            'item_name' => $orderIdentifier,
            'item_number' => $orderIdentifier,
            'amount' => $amount,
            'image_url' => 'https://www.invoiceninja.com/wp-content/uploads/2015/12/PayPal.png',
            'cancel_return' => $this->failUrl
        ];
    }

    private function encryptData($hash, $publicSSLKey, $privateSSLKey, $paypalCert, $openssl)
    {
        $certs = [
            $publicSSLKey,
            $privateSSLKey,
            $paypalCert
        ];

        foreach ($certs as $cert) {
            if (!file_exists($cert)) {
                return false;
            }
        }

        //Assign Build Notation for PayPal Support
        $hash['bn']= 'StellarWebSolutions.PHP_EWP2';

        $data = "";
        foreach ($hash as $key => $value) {
            if ($value != "") {
                //echo "Adding to blob: $key=$value\n";
                $data .= "$key=$value\n";
            }
        }

        $openssl_cmd = "($openssl smime -sign -signer $publicSSLKey -inkey $privateSSLKey " .
            "-outform der -nodetach -binary <<_EOF_\n$data\n_EOF_\n) | " .
            "$openssl smime -encrypt -des3 -binary -outform pem $paypalCert";

        exec($openssl_cmd, $output, $error);


        if (!$error) {
            return implode("\n", $output);
        } else {
            return false;
        }
    }
}